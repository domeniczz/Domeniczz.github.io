<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>进制转换和字符编码</title>
      <link href="/Domeniczz_Blog/2022/11/17/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E5%92%8C%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
      <url>/Domeniczz_Blog/2022/11/17/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E5%92%8C%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="反码、补码"><a href="#反码、补码" class="headerlink" title="反码、补码"></a>反码、补码</h3><p>原码和反码都是为了计算补码，<strong>计算机底层都是补码</strong></p><ul><li><p><strong>反码</strong>（1’s complement）</p><p>正数反码，和原码一样<br>负数的反码，是在原码的基础上保持符号位不变，其他位取反</p></li><li><p><strong>补码</strong>（2’s complement）</p><p>正数和 0 的补码，是该数字本身再补上最高比特 0<br>负数的补码，是将其对应正数按位取反再加 1</p></li></ul><p><img src="https://domenic-gallery.oss-cn-hangzhou.aliyuncs.com/Java基础/clock_for_buma.png" width="380rem" style="border-radius:.4rem" float="left" alt="clock_for_buma"/><div style="clear:both"></div></p><p>负十进制转换为二进制的方式</p><ul><li>先将该十进制的绝对值转换为二进制，然后对得到的二进制进行按位取反，再加 1（负数的需要补码：按位取反，再加 1）</li><li>验证：可以用 负＋正 = 0 的法则来验证两个二进制相加是不是等于 0</li></ul><p>负二进制转换为十进制的方式</p><ul><li>先减 1 再按位取反，合并为十进制整数后添加负号</li></ul><p><strong>例</strong>：</p><ol><li><p>补码 1111 0100 转为十进制</p><p>最高位为 1，是负数的补码 =&gt; 先减 1: 1111 0011 =&gt; 按位取反：0000 1100 =&gt; 转为十进制：12  =&gt; 添加负号：-12</p></li><li><p>补码 0000 1001 转为十进制</p><p>最高位为 0，是正数的补码 =&gt; 补码 == 原码：0000 1001 =&gt; 转为十进制：9</p></li><li><p>反码 1100 1101 转为十进制</p><p>最高位为 1，是负数的补码 =&gt; 按位取反（符号位不变）：1011 0010 =&gt; 转为十进制：-50</p></li><li><p>反码 0101 0011 转为十进制</p><p>最高位为 0，是正数的反码 =&gt; 反码 == 原码：0101 0011 =&gt; 转为十进制：83</p></li></ol><h3 id="字、字节、位"><a href="#字、字节、位" class="headerlink" title="字、字节、位"></a>字、字节、位</h3><p>总线一般被设计来传输固定大小的一块数据，这块数据被称为字（word）</p><p>一个字包含的字节数（即字的大小）是各种计算机系统里面的基本参数，而且这个参数在不同的系统中通常是不同的<br>大多数的现代计算机系统里：一个字是 4 个字节（32 位系统）或 8 个字节（64 位系统）</p><p><strong>结论</strong>：</p><p>一个字等于多少个字节，与系统硬件（总线、CPU 命令字位数等）有关</p><ul><li><p>1 字节（byte） = 8 位（bit）</p></li><li><p>在 16 位的系统中（如 8086 微机）：1 字（word）= 2 字节（byte）= 16（bit）</p><p>在 32 位的系统中（如 win32）：1 字（word）= 4 字节（byte）= 32（bit）</p><p>在 64 位的系统中（如 win64）：1 字（word）= 8 字节（byte）= 64（bit）</p></li></ul><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p><strong>概述</strong>：为了方便计算机识别各个国家的文字，就需要将这些文字采用数字编号的方式进行描述并建立对应的关系表，该表就叫做编码表</p><p>字符编码和字符集是两个不同层面的概念<br>encoding 是 charset encoding 的简写，即字符集编码，简称<strong>编码</strong><br>charset 是 character set 的简写，即<strong>字符集</strong></p><p><strong>编码依赖于字符集</strong>，<strong>一个字符集可以有多个编码实现</strong>，就像代码中的接口实现依赖于接口一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">flowchart BT</span><br><span class="line">  subgraph Unicode</span><br><span class="line">  direction BT</span><br><span class="line">    F(UTF-8 编码) --&gt; E(Unicode 字符集)</span><br><span class="line">    G(UTF-16 编码) --&gt; E</span><br><span class="line">    H(UTF-32 编码) --&gt; E</span><br><span class="line">  end</span><br><span class="line">  subgraph ASCII</span><br><span class="line">  direction BT</span><br><span class="line">    A(ASCII 编码) --&gt; B(ASCII 字符集)</span><br><span class="line">  end</span><br><span class="line">  subgraph GBK</span><br><span class="line">  direction BT</span><br><span class="line">    C(GBK 编码) --&gt; D(GBK 字符集)</span><br><span class="line">  end</span><br><span class="line">  classDef invisible fill-opacity:0,stroke-opacity:0</span><br><span class="line">  class ASCII invisible</span><br><span class="line">  class GBK invisible</span><br><span class="line">  class Unicode invisible</span><br></pre></td></tr></table></figure><p><strong>常见的编码表</strong></p><ul><li>ASCII：美国标准信息交换码， 使用一个字节的低 7 位二位进制进行表示</li><li>ISO8859-1：拉丁码表，欧洲码表，使用一个字节的 8 位二进制进行表示</li><li>GB2312：中国的中文编码表，<strong>最多</strong>使用两个字节 16 位二进制为进行表示</li><li>GBK：中国的中文编码表升级，融合了更多的中文文字符号，<strong>最多</strong>使用两个字节 16 位二进制位表示</li><li>Unicode：国际标准码，融合了目前所有字符，为每个字符分配唯一的字符码。所有的文字都用两个字节 16 位二进制位来表示</li></ul><p><strong>编码的发展</strong></p><ul><li>面向传输的众多 UTF（UCS Transfer Format）标准出现了，UTF-8 就是每次 8 个位传输数据，而 UTF-16 就是每次 16 个位。这是为传输而设计的编码并使编码无国界，这样就可以显示全世界上所有文化的字符了</li><li>Unicode 只是定义了一个庞大的、全球通用的字符集，并为每个字符规定了唯一确定的编号，具体存储成什么样的字节流，取决于字符编码方案。推荐的 Unicode 编码是 UTF-8 和 UTF-16</li><li>UTF-8：变长的编码方式，可用 1-4 个字节来表示一个字符</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建教程 - Hexo</title>
      <link href="/Domeniczz_Blog/2022/11/13/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/Domeniczz_Blog/2022/11/13/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h1><h2 id="Node-js-安装和配置"><a href="#Node-js-安装和配置" class="headerlink" title="Node.js 安装和配置"></a>Node.js 安装和配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载路径：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p>选择自己的系统和合适的版本</p><p>安装一直点 Next 就可以了，安装路径改为其他盘</p><p>Win+R 打开 cmd，运行 node -v 和 npm -v，看有没有输出版本信息</p><h3 id="修改全局模块路径和缓存路径"><a href="#修改全局模块路径和缓存路径" class="headerlink" title="修改全局模块路径和缓存路径"></a>修改全局模块路径和缓存路径</h3><p>当我们在执行 <code>npm install express -g</code> 命令时，g 表示 global 全局，会默认下载到 C 盘，可以放到其他盘</p><p>到 node.js 安装目录下面新建 node_global 和 node_cache 文件夹，在 node_global 文件夹下再建一个 node_modules 文件夹</p><p>命令行中执行以下两条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\Program\nodejs\node_global&quot;</span>  <span class="comment"># 路径替换为自己的</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\Program\nodejs\node_cache&quot;</span></span><br></pre></td></tr></table></figure><p>若使用了 nvm：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\Program\nvm\v16.15.0\node_global&quot;</span>  <span class="comment"># 路径替换为自己的</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\Program\nvm\v16.15.0\node_cache&quot;</span></span><br></pre></td></tr></table></figure><p>在 node.js 的安装目录下，找到 <code>node_modules/npm/npmrc</code> 文件，用管理员模式打开编辑：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加以下命令：</span></span><br><span class="line"><span class="attr">prefix</span>=D:\Program\nodejs\node_global  <span class="comment"># 路径替换为自己的</span></span><br><span class="line"><span class="attr">cache</span>=D:\Program\nodejs\node_cache</span><br></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ul><li><p><strong>在系统变量中，新建</strong></p><p>变量名：NODE_PATH </p><p>变量值：node_global 文件夹下的 node_modules 路径    如：``D:\Program\nodejs\node_global\node_modules`</p></li><li><p><strong>用户变量中的 Path 变量</strong></p><p>将默认的 npm 路径    如：``C:\Users\Domenic\AppData\Roaming\npm`</p><p>修改为新建的 node_global 路径    如：``D:\Program\nodejs\node_global`</p></li></ul><h3 id="测试成果"><a href="#测试成果" class="headerlink" title="测试成果"></a>测试成果</h3><p>配置完后，安装个 module 测试下，就安装最常用的 express 模块</p><p>管理员模式启动命令行，进行模块的全局安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g            <span class="comment"># -g 是全局安装的意思</span></span><br></pre></td></tr></table></figure><h2 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h2><p>下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>安装就一直点 Next</p><p>Git 的默认编辑器是 Vim，这个不用改，如果想要用 Notepad++ 或者 Notepad2，可以添加环境变量</p><p>在系统变量的 path 里面添加 Notepad++ 的安装路径    如：<code>D:\Program\Notepad++</code></p><p>其他的编辑器配置方式也同理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad++ 文件名.后缀              <span class="comment"># 在 git bash 中调用 notepad++ 打开文件</span></span><br></pre></td></tr></table></figure><p>测试是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version                     <span class="comment"># 命令行执行此代码</span></span><br></pre></td></tr></table></figure><h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><p>管理员模式启动命令行，进行 hexo-cli 的全局安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line"><span class="comment"># 安装完可以用以下命令查看是否安装成功</span></span><br><span class="line">hexo -v                           <span class="comment"># 查看 hexo 工具的版本</span></span><br><span class="line">npm list -g                       <span class="comment"># 查看全局安装的模块列表</span></span><br></pre></td></tr></table></figure><h1 id="搭建仓库"><a href="#搭建仓库" class="headerlink" title="搭建仓库"></a>搭建仓库</h1><p>我们使用 Github 来搭建仓库    网址：<a href="https://github.com/">https://github.com/</a></p><p>Github 账号的 用户名，注册邮箱，密码 很重要，因为在命令中需要使用这些信息</p><p><img src="https://domenic-gallery.oss-cn-hangzhou.aliyuncs.com/Trifles/个人博客搭建/image-20211226154022519.png" width="400rem" style="border-radius:.4rem" float="left" alt="image-20211226154022519"/><div style="clear:both"></div></p><p>点击 New 来新建仓库</p><p>仓库名必须是 Github 用户名加上 .github.io    如：domeniczz.github.io</p><p>然后勾选 Add a README file，Add .gitignore 和 Choose a license 可以不勾选</p><p>之后就可以点击创建仓库了</p><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><p>打开文件资源管理器，进入任意一个文件夹    如：<code>D:\Repository\</code></p><p>右键，点击 Git Bash Here，启动 Git Bash 命令行窗口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 Git Bash 执行以下命令</span></span><br><span class="line">ssh                               <span class="comment"># 检查电脑中有没有安装 ssh</span></span><br><span class="line"><span class="comment"># 生成 ssh key</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的账号邮箱地址&quot;</span></span><br><span class="line"><span class="comment"># Linux 环境的粘贴快捷键是：Shift + insert</span></span><br><span class="line"><span class="comment"># 之后要敲 4 次回车（出现冒号 &#x27;:&#x27; 就敲回车）</span></span><br></pre></td></tr></table></figure><p>之后进入如下路径：<code>C:\Users\用户名\.ssh</code>（这就是刚刚的命令生成的东西）</p><p>找到 id_rsa.pub 文件，然后使用 Notepad++ 或者其他编辑器打开，复制所有内容</p><p>Ctrl + A 全选，Ctrl + C 复制</p><hr><p>之后进入 Github，点击右上角的用户头像，点击 Settings，在选择 SSH and GPG keys</p><p>点击 New SSH key 新建一个 ssh key</p><p>Title 填写什么无所谓    如：domeniczz blog</p><p>Key 中把刚刚复制的 id_rsa.pub 中的内容粘贴进去</p><p>之后测试 ssh 是否绑定成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 Git Bash 执行以下命令</span></span><br><span class="line">ssh -T git@github.com</span><br><span class="line"><span class="comment"># 出现：Are you sure you want to continue connecting (yes/no/[fingerprint])?</span></span><br><span class="line"><span class="comment"># 输入 yes，回车</span></span><br><span class="line"><span class="comment"># 显示：Hi domeniczz! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="comment"># 绑定成功！</span></span><br></pre></td></tr></table></figure><p>如果要添加第二个仓库，比如 Gitee，需要再次操作一边 SSH 模块的步骤</p><h1 id="本地生成博客内容"><a href="#本地生成博客内容" class="headerlink" title="本地生成博客内容"></a>本地生成博客内容</h1><p>本地创建一个文件夹    如：<code>D:\Repository\Domenic_Zhang_Blog</code></p><p>用管理员模式启动 Git Bash，之后用 cd 命令到文件夹    如：<code>cd D:/Repository/Domenic_Zhang_Blog</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 Git Bash 中执行命令</span></span><br><span class="line">npm install -g hexo               <span class="comment"># 如果之前没有安装，就安装，安装了的不用管</span></span><br><span class="line">hexo init                         <span class="comment"># 初始化 hexo 博客</span></span><br><span class="line"><span class="comment"># 如果出现 fatal: unable to access &#x27;heeps://github.com/hexojs/hexo-starter.git&#x27;</span></span><br><span class="line"><span class="comment"># 不要慌，网络问题，只是没有连接上 Github，多试几次</span></span><br><span class="line"><span class="comment"># 显示：INFO  Start blogging with Hexo!</span></span><br><span class="line"><span class="comment"># 初始化成功！</span></span><br></pre></td></tr></table></figure><p>执行 <code>hexo init</code> </p><ul><li>若提示 hexo: command not found，是因为没有正确<a href="#%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">配置环境变量</a></li><li>若提示 Failed to install dependencies，是因为没有用管理员身份启动</li></ul><p>Hexo 是开源的框架，hexo init 是把 hexo 的开源仓库拷贝到了本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 接着在 Git Bash 中执行命令</span></span><br><span class="line">hexo s                            <span class="comment"># server，打开了本地的服务器</span></span><br></pre></td></tr></table></figure><p>如果提示防火墙权限，就点击允许访问</p><p>显示：INFO  Hexo is running at <a href="http://localhost:4000/">http://localhost:4000</a> . Press Ctrl+C to stop.  说明打开服务器成功</p><p>我们可以复制网址 <a href="http://localhost:4000/">http://localhost:4000</a> 来访问</p><p>Linux 环境的复制快捷键是：Ctrl + insert，按 Ctrl + C 就是关闭本地服务器</p><h1 id="发布博客到互联网"><a href="#发布博客到互联网" class="headerlink" title="发布博客到互联网"></a>发布博客到互联网</h1><p>进入 Github 仓库，按照以下步骤获取到仓库</p><p><img src="https://domenic-gallery.oss-cn-hangzhou.aliyuncs.com/Trifles/个人博客搭建/image-20211226172830653.png" width="850rem" style="border-radius:.4rem" float="left" alt="image-20211226172830653"/><div style="clear:both"></div></p><p>进入本地博客的文件夹    如：<code>D:\Repository\Domenic_Zhang_Blog</code></p><p>找到 _config.yml，使用 Notepad++ 或者其他编辑器打开</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉到文件的最后</span></span><br><span class="line"><span class="comment"># 默认的是: </span></span><br><span class="line"><span class="attr">deploy:</span> </span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 改为: </span></span><br><span class="line"><span class="comment"># 注意，输入的内容和 &#x27;:&#x27; 之间要有一个空格</span></span><br><span class="line"><span class="attr">deploy:</span> </span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> </span><br><span class="line">    <span class="comment"># github: https://github.com/domeniczz/domeniczz.github.io.git</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:domeniczz/domeniczz.github.io.git</span> <span class="comment"># Github 仓库 ssh 地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span>                  <span class="comment"># Github 主分支默认是 main，我改成了 master，没改过的就填 main</span></span><br></pre></td></tr></table></figure><p>之后在 Git Bash 里面依次执行命令</p><p>Git Bash 的命令路径是本地博客的路径    如：<code>/d/repository/Domenic_Zhang_Blog</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 hexo-deployer-git 自动部署发布工具</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若安装报错，可以先清除一下再安装</span></span><br><span class="line"><span class="built_in">rm</span> -rf .deploy_git</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">-----------------------------------------------------------------------------------------------------</span><br><span class="line">npm list hexo-deployer-git        <span class="comment"># 检查是否安装成功</span></span><br><span class="line">hexo g                            <span class="comment"># generate，生成页面，放在 public 文件夹下面生成当日日期的文件路径下</span></span><br><span class="line">                                  <span class="comment"># 如：./public/2021/12/27/hello-world/</span></span><br><span class="line">hexo d                            <span class="comment"># deploy，该命令就是把本地的博客的文件上传到 GitHub 仓库</span></span><br></pre></td></tr></table></figure><p>获取个人博客的 url：</p><p>进入仓库的设置，往下拉找到 Pages，点击 Visit site</p><p>就会看到：Your site is published at <a href="https://domeniczz.github.io/.../">https://domeniczz.github.io/.../</a></p><h1 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h1><h2 id="主题推荐"><a href="#主题推荐" class="headerlink" title="主题推荐"></a>主题推荐</h2><p>推荐几个主题：</p><p>Pure: <a href="https://github.com/cofess/hexo-theme-pure">https://github.com/cofess/hexo-theme-pure</a></p><p>Preview: <a href="http://cofess.github.io/">http://cofess.github.io/</a></p><hr><p>Melody: <a href="https://github.com/Molunerfinn/hexo-theme-melody">https://github.com/Molunerfinn/hexo-theme-melody</a></p><p>Preview: <a href="https://flytreeleft.org/">https://flytreeleft.org/</a></p><hr><p>Butterfly: <a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a></p><p>Preview: <a href="https://butterfly.js.org/">https://butterfly.js.org/</a>    <a href="https://crazywong.com/">https://crazywong.com/</a></p><hr><p>Diaspora: <a href="https://github.com/Fechin/hexo-theme-diaspora">https://github.com/Fechin/hexo-theme-diaspora</a></p><p>Preview: <a href="https://fech.in/">https://fech.in/</a></p><hr><p>Matery: <a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p><p>Preview: <a href="http://blinkfox.com/">http://blinkfox.com/</a></p><hr><p>Maupassant: <a href="https://github.com/tufu9441/maupassant-hexo">https://github.com/tufu9441/maupassant-hexo</a></p><p>Preview: <a href="https://www.haomwei.com/">https://www.haomwei.com/</a></p><h2 id="示例安装"><a href="#示例安装" class="headerlink" title="示例安装"></a>示例安装</h2><p>我选择安装的是 butterfly 主题</p><p>依次执行以下步骤（使用 npm 命令的时候，命令行要以管理员身份运行）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装方法一</span></span><br><span class="line"><span class="comment"># 用 git 把 master 分支克隆到 themes/butterfly 文件夹下</span></span><br><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line">------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 安装方法二</span></span><br><span class="line">npm i hexo-theme-butterfly        <span class="comment"># Hexo 版本要 5.0.0 以上，安装后放在 ./node_modules</span></span><br><span class="line">npm update hexo-theme-butterfly   <span class="comment"># 升级</span></span><br><span class="line"><span class="comment"># 升级后去 https://github.com/jerryc127/hexo-theme-butterfly/releases 查看更新内容</span></span><br></pre></td></tr></table></figure><p>修改 Hexo 根目录下的 _config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span>                  <span class="comment"># 主题设置为 butterfly</span></span><br></pre></td></tr></table></figure><p>下载安装 pug 以及 stylus 的渲染器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br><span class="line">npm list                          <span class="comment"># 检查有没有安装上</span></span><br></pre></td></tr></table></figure><p>为了减少升级主题后带来的不便，建议：</p><ol><li>如果已经在 <code>source/_data/</code> 创建了 butterfly.yml，删除掉</li><li>在 hexo 的根目录创建文件 _config.butterfly.yml，并把 <strong><u>主题目录</u></strong> 的 _config.yml 内容复製到 _config.butterfly.yml 中（以后只在 _config.butterfly.yml 中进行配置就行）</li></ol><p>最后，可以执行 hexo g 生成页面，再执行 hexo s 来开启本地服务器，预览页面</p><p>更多的使用方法可以前往 <a href="https://butterfly.js.org/">https://butterfly.js.org/</a> 查看安装文档</p><h1 id="Hexo-使用"><a href="#Hexo-使用" class="headerlink" title="Hexo 使用"></a>Hexo 使用</h1><p>Hexo 的使用文档：<a href="https://hexo.io/zh-cn/docs">https://hexo.io/zh-cn/docs</a></p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 括号内是简写</span></span><br><span class="line">hexo g --deploy(-d)               <span class="comment"># 文件生成后立即部署网站</span></span><br><span class="line">hexo g --watch(-w)                <span class="comment"># ！这个命令很有用，实时监控文件的变化，适合调试</span></span><br><span class="line">                                  <span class="comment"># 更改文件后可以在新的命令行窗口执行 hexo s 来查看效果</span></span><br><span class="line">-----------------------------------------------------------------------------------------------------</span><br><span class="line">hexo s --port(-p)                 <span class="comment"># 更改端口，防止端口被占用</span></span><br><span class="line">hexo s --static(-s)               <span class="comment"># 直接使用 public 目录下生成的静态文件，不会重新生成</span></span><br><span class="line">                                  <span class="comment"># 因为 hexo s 相当于 hexo g 加上 hexo s -s，会重新生成一遍</span></span><br><span class="line">-----------------------------------------------------------------------------------------------------</span><br><span class="line">hexo list &lt;<span class="built_in">type</span>&gt;                  <span class="comment"># 如：hexo list post 可以显示出所有的文章</span></span><br><span class="line">                                  <span class="comment"># 如：hexo list route 可以显示出网站文件架构</span></span><br><span class="line">-----------------------------------------------------------------------------------------------------</span><br><span class="line">hexo clean                        <span class="comment"># 清除缓存文件(db.json)和已生成的静态文件(public)</span></span><br><span class="line">                                  <span class="comment"># 如果发现有错误矫正不了，可以使用此命令</span></span><br><span class="line">hexo --safe                       <span class="comment"># 安全模式，不会载入插件和脚本，当安装新插件出问题时，可尝试用安全模式</span></span><br><span class="line">-----------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>先创建一个备份 _config_backup.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以调用自定义的配置文件</span></span><br><span class="line">hexo s --config _config_custom.yml</span><br><span class="line"><span class="comment"># 也可以同时调用多个（Hexo 会自动合并成一个 _multiconfig.yml，排在后面的的配置文件优先级高）</span></span><br><span class="line">hexo s --config _custom_1.yml,_custom_2.yml</span><br><span class="line">------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 如果想长期切换为其他的配置文件</span></span><br><span class="line">hexo --config _config_custom.yml  <span class="comment"># 把配置文件指定为 _config_custom.yml</span></span><br><span class="line"><span class="comment"># 我没有更换</span></span><br></pre></td></tr></table></figure><p>添加 Hexo 需要 包含、剔除、忽略 的文件（Hexo 默认忽略隐藏文件）：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;.nojekyll&quot;</span> <span class="comment"># this file will tell GitHub not using Jekyll to render site</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;.DS_Store&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;desktop.files.json&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;desktop.files&quot;</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;desktop.files.json&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;desktop.files&quot;</span></span><br></pre></td></tr></table></figure><p>文章插入图片：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-marked  <span class="comment"># 安装相应的插件（新版 hexo 可自带了）</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改根目录的 _config.yml</span></span><br><span class="line"><span class="comment"># 启用 asset 功能（资源文件夹）</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span> <span class="comment"># enabled, automatically resolved asset image to its corresponding post’s </span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># markdown 博客文件中，图片路径要写成：</span></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">asset_img</span> <span class="string">slug</span> [<span class="string">title</span>] <span class="string">%</span>&#125; <span class="comment"># slug 是图片的文件名，title 是文章的标题（因为图片放在同名文件夹下）</span></span><br><span class="line">                             <span class="comment"># 如：&#123;% asset_img new.png [个人博客搭建教程] %&#125;</span></span><br></pre></td></tr></table></figure><p>中英文间自动插入空格：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Insert a space between Chinese character and English character (中英文之间添加空格)</span></span><br><span class="line"><span class="attr">pangu:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 改为 true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># site/post</span></span><br></pre></td></tr></table></figure><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>Hexo 创建的文章模板在 ./scaffolds 下面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行方式新建 博客文章</span></span><br><span class="line">hexo new <span class="string">&quot;Your Artical Title&quot;</span>     <span class="comment"># hexo 会在 ./source/_posts 文件夹下面创建该名 .md 文件</span></span><br><span class="line">                                  <span class="comment"># 其中的 title 就是文章标题，date 就是创建日期，tags 是文章标签</span></span><br><span class="line">hexo new <span class="string">&quot;title&quot;</span> --replace(-r)    <span class="comment"># 若存在同名文章，就将其替换</span></span><br><span class="line">                 --path(-p)       <span class="comment"># 自定义新文章的路径</span></span><br><span class="line">-----------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 命令行方式新建 博客文章</span></span><br><span class="line">hexo new draft <span class="string">&quot;Draft Title&quot;</span>      <span class="comment"># hexo 会在 ./source/_drafts 文件夹下面创建该名 .md 文件</span></span><br><span class="line">                                  <span class="comment"># 草稿文章不会被渲染，不显示在博客中</span></span><br><span class="line">-----------------------------------------------------------------------------------------------------</span><br><span class="line">hexo new page <span class="string">&quot;Page Title&quot;</span>        <span class="comment"># hexo 会在 ./source/_page 文件夹下面创建该名 .md 文件</span></span><br></pre></td></tr></table></figure><p>自己也可以在 scaffolds 文件夹下面创建自定义模板</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
